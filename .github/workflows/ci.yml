name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.2'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted:"
          gofmt -s -d .
          exit 1
        fi
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
    
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...
    
    - name: Security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec.sarif ./...'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()
    
    - name: Vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Cross-platform builds
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: arm
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: freebsd
            goarch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
        VERSION: ${{ steps.version.outputs.version }}
        COMMIT_SHA: ${{ steps.version.outputs.commit }}
        BUILD_TIME: ${{ steps.version.outputs.build_time }}
      run: |
        BINARY_NAME="init-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" == "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build \
          -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${COMMIT_SHA} -X main.buildTime=${BUILD_TIME}" \
          -trimpath \
          -o "$BINARY_NAME" \
          ./cmd/init
        
        # Create checksum
        if command -v sha256sum >/dev/null; then
          sha256sum "$BINARY_NAME" > "${BINARY_NAME}.sha256"
        elif command -v shasum >/dev/null; then
          shasum -a 256 "$BINARY_NAME" > "${BINARY_NAME}.sha256"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: init-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          init-*
          *.sha256
        retention-days: 30

  # Static binary build for containers
  build-static:
    name: Build Static Binary
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
    
    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
    
    - name: Build static binary
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: amd64
        CC: gcc
        VERSION: ${{ steps.version.outputs.version }}
        COMMIT_SHA: ${{ steps.version.outputs.commit }}
        BUILD_TIME: ${{ steps.version.outputs.build_time }}
      run: |
        go build \
          -tags 'netgo osusergo static_build' \
          -ldflags="-s -w -linkmode=external -extldflags '-static' -X main.version=${VERSION} -X main.commit=${COMMIT_SHA} -X main.buildTime=${BUILD_TIME}" \
          -trimpath \
          -o init-linux-amd64-static \
          ./cmd/init
        
        # Verify static build
        ldd init-linux-amd64-static || echo "Static binary confirmed"
        
        # Create checksum
        sha256sum init-linux-amd64-static > init-linux-amd64-static.sha256
    
    - name: Upload static binary
      uses: actions/upload-artifact@v4
      with:
        name: init-static-binary
        path: |
          init-linux-amd64-static*
        retention-days: 30

  # Docker image builds
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COMMIT_SHA=${{ steps.version.outputs.commit }}
          BUILD_TIME=${{ steps.version.outputs.build_time }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      if: github.event_name != 'pull_request'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: github.event_name != 'pull_request'

  # Release creation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-static, docker]
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release
        find ./artifacts -type f -name "init-*" -exec cp {} release/ \;
        find ./artifacts -type f -name "*.sha256" -exec cp {} release/ \;
        
        # Create a combined checksum file
        cd release
        sha256sum * > checksums.txt
        cd ..
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          awk '/^## \[.*\]/{if(found) exit; found=1; next} found && /^## \[.*\]/{exit} found' CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=Automated release for ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        body: |
          ## Release ${GITHUB_REF#refs/tags/}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### Docker Images
          ```
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GITHUB_REF#refs/tags/}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          ### Verification
          All binaries are provided with SHA256 checksums. Verify downloads with:
          ```
          sha256sum -c checksums.txt
          ```
        draft: false
        prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}